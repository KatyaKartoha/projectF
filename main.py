from logic import DB_Manager
from config import *
from telebot import TeleBot
from telebot.types import InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardMarkup, KeyboardButton
from telebot import types
import json
import requests

bot = TeleBot(TOKEN)
hideBoard = types.ReplyKeyboardRemove() 

#headers = {"Authorization": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX2lkIjoiODE2MjBmNDktNjQ4My00MTJmLWE4YWItNzdjY2JlYWYzZDA5IiwidHlwZSI6ImFwaV90b2tlbiJ9._0Bd1L9yrN0QYVSg7MNHbBmcSCWxJXqZvOAUGt9zagc"}
url = "https://api.edenai.run/v2/text/chat"
api = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX2lkIjoiODE2MjBmNDktNjQ4My00MTJmLWE4YWItNzdjY2JlYWYzZDA5IiwidHlwZSI6ImFwaV90b2tlbiJ9._0Bd1L9yrN0QYVSg7MNHbBmcSCWxJXqZvOAUGt9zagc"
def generate(text):
    headers = {"Authorization": f"Bearer {api}"}
    ur = f"{url}"
    payload = {
    "providers": "openai, cohere",
    "text": f"{text}",
    "temperature" : 0.2,
    "max_tokens" : 250 }
    response = requests.post(ur, json=payload, headers=headers)
    result = json.loads(response.text)
    return result['openai']['generated_text']

cancel_button = "–û—Ç–º–µ–Ω–∞ üö´"
def cansel(message):
    bot.send_message(message.chat.id, "–ß—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∫–æ–º–∞–Ω–¥—ã, –∏—Å–ø–æ–ª—å–∑—É–π - /info", reply_markup=main_markup())
  
def main_markup():
    markup = ReplyKeyboardMarkup()
    markup.add(KeyboardButton('SOS'))
    return markup

def support_markup():
    markup = ReplyKeyboardMarkup()
    markup.add(KeyboardButton(cancel_button))
    return markup

def gen_inline_markup():
    markup = InlineKeyboardMarkup()
    markup.row_width = 1
    markup.add(InlineKeyboardButton(cancel_button, callback_data='cancel'))
    return markup

@bot.callback_query_handler(func=lambda call: True)
def callback_query(call):
    if call.data == "cancel":
        cansel(call.message)

def gen_markup(rows):
    markup = ReplyKeyboardMarkup(one_time_keyboard=True)
    markup.row_width = 1
    for row in rows:
        markup.add(KeyboardButton(row))
    markup.add(KeyboardButton(cancel_button))
    return markup

  
def no_participants(message):
    bot.send_message(message.chat.id, '–ú–æ–∂–µ—à—å —Å—Ç–∞—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–º —Å –ø–æ–º–æ—à—å—é –∫–æ–º–∞–Ω–¥—ã /participate')

# def gen_markup(rows):
#     markup = ReplyKeyboardMarkup(one_time_keyboard=False)
#     markup.row_width = 1
#     for row in rows:
#         markup.add(KeyboardButton(row))
#     markup.add(KeyboardButton(button_help))
#     return markup


attributes_of_projects = {'–ò–º—è —É—á–∞—Å—Ç–Ω–∏–∫–∞' : ["–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ–º–æ–µ –∏–º—è", "user_name"],
                          "–ü—Ä–æ–±–ª–µ–º–∞" : ["–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã", "problem"],
                          "–°—Ç–∞—Ç—É—Å" : ["–í–≤–µ–¥–∏—Ç–µ —Å—Ç–∞—Ç—É—Å –ø—Ä–æ–±–ª–µ–º—ã", "status_id"],
                          "–ö–æ–Ω—Ç–∞–∫—Ç" : ["–í–≤–µ–¥–∏—Ç–µ –∫–æ–Ω—Ç–∞–∫—Ç–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é", "contact_info"]}


@bot.message_handler(commands=['start'])
def start_command(message):
    bot.send_message(message.chat.id, """–ü—Ä–∏–≤–µ—Ç!üëã –Ø –±–æ—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏
–ü–æ–º–æ–≥—É —Ç–µ–±–µ —Å–≤—è–∑–∞—Ç—å—Å—è —Å –¥—Ä—É–≥–∏–º–∏ –ª—é–¥—å–º–∏!) 
""", reply_markup=main_markup())
    info(message)
    
@bot.message_handler(commands=['info'])
def info(message):
    bot.send_message(message.chat.id,
"""
–í–æ—Ç –∫–æ–º–∞–Ω–¥—ã –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç —Ç–µ–±–µ –ø–æ–º–æ—á—å:
/start - –°—Ç–∞—Ä—Ç –ø—Ä–æ–≥—Ä–∞–º–º—ã
/info - –¢–æ, —á—Ç–æ –≤—ã —á–∏—Ç–∞–µ—Ç–µ —Å–µ–π—á–∞—Å :]
/participate - –ü—Ä–∏–Ω—è—Ç—å —É—á–∞—Å—Ç–∏–µ –≤ –ø—Ä–æ–µ–∫—Ç–µ
/description -  –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –≤–∞—à–µ–π (–ø—Ä–æ–±–ª–µ–º—ã) –ø—Ä–æ–±–ª–µ–º—ã
/details -  –î–æ–±–∞–≤–∏—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –≤–∞—à–µ–π –ø—Ä–æ–±–ª–µ–º—ã, —á—Ç–æ –±—ã –ø–æ–º–æ—á—å –¥—Ä—É–≥–∏–º —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –µ—ë
/seek - –ü–æ–∏—Å–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —Å –ø–æ—Ö–æ–∂–µ–π –ø—Ä–æ–±–ª–µ–º–æ–π
/found - –ü–æ–∏—Å–∫ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞ (–æ—Å—É—â–µ—Å—Ç–≤–ª—è–µ—Ç—Å—è –ø–æ –∏–º–µ–Ω–∏)
–ï—Å–ª–∏ –í–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º –∫–æ–Ω—Ç–∞–∫—Ç –¥–ª—è —Å–≤—è–∑–∏ —Å–æ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–º (–ë, –ö, –†) –í–≤–µ–¥–∏—Ç–µ SOS –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É
""", reply_markup=main_markup())
    


@bot.message_handler(commands=['participate'])
def addtask_command(message):
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ—ë –∏–º—è:", reply_markup=support_markup())
    bot.register_next_step_handler(message, user_name)
 
def user_name(message):
    if message.text == cancel_button:
        cansel(message)
        return
    name = message.text.lower()
    user_id = message.from_user.id
    data = [user_id, name]
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ—é –ø—Ä–æ–±–ª–µ–º—É", reply_markup=support_markup())
    bot.register_next_step_handler(message, problem, data=data)
    print(data)

def problem(message, data):
    if message.text == cancel_button:
        cansel(message)
        return
    #problemka = message.text
    data.append(message.text.lower())
    #data = [problemka]
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ —Å—Ç–∞—Ç—É—Å –ø—Ä–æ–±–ª–µ–º—ã", reply_markup=support_markup())
    bot.register_next_step_handler(message, problem_status, data=data)
    print(data)

def problem_status(message, data):
    if message.text == cancel_button:
        cansel(message)
        return
    #state = message.text
    data.append(message.text.lower())
    #data = [user_id, problemka]
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –∫–æ–Ω—Ç–∞–∫—Ç", reply_markup=support_markup())
    bot.register_next_step_handler(message, contact, data=data)
    print(data)

def contact(message, data):
    if message.text == cancel_button:
        cansel(message)
        return
    #my_con = message.text
    data.append(message.text.lower())
    print(data)
    manager.insert_problem(tuple(data))
    bot.send_message(message.chat.id, "Done")





@bot.message_handler(commands=['details'])
def deet_handler(message):
    bot.send_message(message.chat.id, 'Please enter your problem', reply_markup=support_markup())
    user_id = message.from_user.id
    apply = [user_id]
    #projects = manager.get_participance(user_id)
    bot.register_next_step_handler(message, detailer, apply=apply)

def detailer(message, apply):
    if message.text == cancel_button:
        cansel(message)
        return
    problem_name = message.text
    apply.append(problem_name.lower())
    bot.send_message(message.chat.id, '–û—Å—Ç–∞–≤—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –¥–ª—è –¥—Ä—É–≥–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π', reply_markup=support_markup())
    bot.register_next_step_handler(message, set_deets, apply=apply)

def set_deets(message, apply):
    description = message.text
    if message.text == cancel_button:
        cansel(message)
        return
    apply.append(description)
    manager.insert_deets(tuple(apply))
    bot.send_message(message.chat.id, f'–í–∞—à–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∫ –ø—Ä–æ–±–ª–µ–º–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ ')

@bot.message_handler(commands=['description'])
def desc_search_handler(message):
    bot.send_message(message.chat.id, 'Enter your problem', reply_markup=support_markup())
    # prob = message.text
    bot.register_next_step_handler(message, get_prob)

def get_prob(message):
    prob_for_deets = message.text.lower()
    if message.text == cancel_button:
        cansel(message)
        return
    bot.send_message(message.chat.id, "–í–æ—Ç —á—Ç–æ –Ω–∞—à–ª–æ—Å—å")
    #bot.register_next_step_handler(message, continuation, prob=prob)
    desc_get(message, prob_for_deets)

def desc_get(message, prob_for_deets):
    figured = manager.get_deets(prob_for_deets)
    if figured:
        text = "\n".join([f"\nDescription: {x[2]}" for x in figured])
        bot.send_message(message.chat.id, prob_for_deets + text)
    else:
    #     print(info[0][1], info[0][2], info[0][3], info[0][4] )
        bot.send_message(message.chat.id, '–ü–æ—Ö–æ–∂–µ –Ω–∏—á–µ–≥–æ –ø–æ–¥–æ–±–Ω–æ–≥–æ –Ω–µ –Ω–∞—à–ª–æ—Å—å' )


@bot.message_handler(commands=['seek'])
def participants_handler(message):
    bot.send_message(message.chat.id, 'Enter your problem', reply_markup=support_markup())
    # prob = message.text
    bot.register_next_step_handler(message, prob_con)

def prob_con(message):
    prob = message.text.lower()
    if message.text == cancel_button:
        cansel(message)
        return
    bot.send_message(message.chat.id, "–í–æ—Ç —á—Ç–æ –Ω–∞—à–ª–æ—Å—å")
    #bot.register_next_step_handler(message, continuation, prob=prob)
    continuation(message, prob)

def continuation(message, prob):
    info = manager.get_participants(prob)
    if info:
        text = "\n".join([f"Name: {x[1]} \nProblem: {x[2]} \nStatus: {x[3]} \nContact: {x[4]}\n" for x in info])
        bot.send_message(message.chat.id, text)
    else:
    #     print(info[0][1], info[0][2], info[0][3], info[0][4] )
        bot.send_message(message.chat.id, '–ü–æ—Ö–æ–∂–µ –Ω–∏—á–µ–≥–æ –ø–æ–¥–æ–±–Ω–æ–≥–æ –Ω–µ –Ω–∞—à–ª–æ—Å—å' )


@bot.message_handler(commands=['found'])
def participants_handler(message):
    bot.send_message(message.chat.id, 'Enter the name of participant in search', reply_markup=support_markup())
    # prob = message.text
    bot.register_next_step_handler(message, cont)

def cont(message):
    named = message.text.lower()
    if message.text == cancel_button:
        cansel(message)
        return
    bot.send_message(message.chat.id, "–í–æ—Ç —á—Ç–æ –Ω–∞—à–ª–æ—Å—å(/found)")
    #bot.register_next_step_handler(message, contin, named=named)
    contin(message, named)

def contin(message, named):
    info_cert = manager.get_participant_cert(named)
    if info_cert:
        text = "\n".join([f"Name: {x[1]} \nProblem: {x[2]} \nStatus: {x[3]} \nContact: {x[4]}\n" for x in info_cert])
        bot.send_message(message.chat.id, text)
    else:
        bot.send_message(message.chat.id, '–ü–æ—Ö–æ–∂–µ –Ω–∏–∫–æ–≥–æ –ø–æ–¥–æ–±–Ω–æ–≥–æ –Ω–µ –Ω–∞—à–ª–æ—Å—å' )
        no_participants(message)#     print(info[0][1], info[0][2], info[0][3], info[0][4]



@bot.message_handler(func=lambda message: True)
def sos_message(message):
    string = "SOS"
    if message.text == string:
        bot.send_message(message.chat.id, f"–°–≤—è–∂–∏—Ç–µ—Å—å —Å–æ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–º –ø–æ –Ω—É–∂–Ω–æ–º—É –Ω–æ–º–µ—Ä—É:\n \n–ú–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω–∞—è –≥—É–º–∞–Ω–∏—Ç–∞—Ä–Ω–∞—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è '–ß–µ–ª–æ–≤–µ–∫ –≤ –±–µ–¥–µ' (People in Need, PIN): 0 800 210 160\n \n–†–æ—Å—Å–∏—è(): +7 495 989-50-50 –∏–ª–∏ 8 (800) 333-44-34\n \n–ö–∞–∑–∞—Ö—Å—Ç–∞–Ω: +7 708 983 28 63 –∏ +7 727 376 56 60 –∏–ª–∏ 150\n \n–ë–µ–ª–æ—Ä—É—Å—å: 8(801) 100 16 11(–¥–ª—è –Ω–µ—Å–æ–≤–µ—Ä—à–µ–Ω–Ω–æ–ª–µ—Ç–Ω–∏—Ö)\n \n–£–∫—Ä–∞–∏–Ω–∞: 0 800 331 800 (–¥–æ 19:00) –∏–ª–∏ 7333(–∫—Ä—É–≥–ª–æ—Å—É—Ç–æ—á–Ω–æ, –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏–µ —Å–∞–º–æ—É–±–∏–π—Å—Ç–≤)\n \n –ö—ã—Ä–≥—ã–∑—Å—Ç–∞–Ω: 111(–¥–µ—Ç—Å–∫–∏–π) –∏–ª–∏ -")
    else:
        #generate(message.text)
        bot.send_message(message.chat.id, generate(message.text))


if __name__ == '__main__':
    manager = DB_Manager(DATABASE)
    bot.infinity_polling()
#Addition to db
#Integration of AI (not decided)
#Keyboard creation